ServiceLoader Requirements: ServiceLoader needs both:
A provider module that declares provides SomeInterface with SomeImplementation
A consumer module that declares uses SomeInterface

The beauty of ServiceLoader is that it creates a "plug-in" architecture where:
Implementation modules can be added/removed without changing consumer code
Multiple implementations can exist and be discovered at runtime
Modules stay loosely coupled, only sharing the interface contract

I stedet for at hardcorde, hvilken klasse der skal bruges, kan ServiceLoader finde den rigtige implementation automatisk.

Et interface definerer en service (f.eks. IEntityProcessingService).
Et modul tilbyder en implementation med provides ... with ....
Et andet modul angiver, at det har brug for servicen med uses.
ServiceLoader finder og bruger den rigtige implementation ved runtime.

Plugins og udvidelser â†’ Man kan tilfÃ¸je nye implementeringer uden at Ã¦ndre koden.
Dynamisk opdagelse â†’ Finder implementationer automatisk ved runtime.
TÃ¦nk pÃ¥ ServiceLoader som en automatisk "find og brug den rigtige klasse"-mekanisme.

eksempel:

public interface MessageService {
    void sendMessage(String message);
}

public class EmailService implements MessageService {
    public void sendMessage(String message) {
        System.out.println("Sender e-mail: " + message);
    }
}
module EmailModule {
    provides MessageService with EmailService;
}

module AppModule { //dette modul kan nu use MessageService
    uses MessageService;
}

ServiceLoader<MessageService> loader = ServiceLoader.load(MessageService.class);
for (MessageService service : loader) {
    service.sendMessage("Hej fra ServiceLoader!");
} // i en klasse fra AppModule kan man nu finde og bruge servicen dynamisk

sÃ¥ modulet emailmodule indholder interfacet messageservice og klassen emailservice og modulet viser at det provider interfacet
messageservice og bruger klassen emailservice

Interfacet (MessageService) â†’ Definerer, hvad en beskedservice skal kunne.
Implementeringen (EmailService) â†’ En konkret klasse, der sender beskeder via e-mail.
provides MessageService with EmailService; â†’ FortÃ¦ller Java, at EmailService er en implementation af MessageService.


ðŸ’¡SPI = SERVICE PROVIDER INTERFACE, som i eksemplet netop er det MessageService er

SPI er altsÃ¥ nÃ¥r et modul skal bruges af et andet modul, og common er bare for at spillet fungere.
Fx bullets skal bruges af et andet modul Player, sÃ¥ bullets er SPI og Player har brug for common, som er det der bygger verdenen
ðŸ’¡ Common â†’ Indeholder SPI'er og fÃ¦lles kode
ðŸ’¡ Player, Enemy, Asteroid osv. â†’ Implementerer SPI'er og registrerer sig selv med provides
SÃ¥ SPI'et er det, som moduler implementerer for at kunne arbejde sammen, mens Common er noget, hele spillet har brug for. ðŸš€